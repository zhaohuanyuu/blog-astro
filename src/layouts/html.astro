---
import "../styles/reset.css"
import "../styles/global.css"
import { theme as darkTheme } from "../styles/theme/dark.css"
import { theme as lightTheme } from "../styles/theme/light.css"

import SEO from "../components/misc/seo.astro"
import { THEME_STORAGE_KEY } from "../common/utils"

interface Props {
	title: string
}

const { title } = Astro.props
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
    <SEO />
		<link rel="icon" type="image/png" href="/images/brand.png" />
		<title>{title}</title>
		<slot name="head"></slot>
	</head>
	<body>
		<slot />
 	</body>
</html>

<script define:vars={{lightTheme, darkTheme, THEME_STORAGE_KEY}} is:inline>
  const root = document.documentElement;
  const systemPrefer = matchMedia("(prefers-color-scheme: dark)");
  const setSystemPrefer = prefer => setTheme(prefer.matches ? "dark" : "light");
  const themeKey = localStorage && localStorage.getItem(THEME_STORAGE_KEY);
  const setTheme = (theme) => {
    root.style.colorScheme = theme;
    root.classList.remove(lightTheme, darkTheme);
    if (theme === "light") {
      root.classList.add(lightTheme);
    } else {
      root.classList.add(darkTheme);
    }
  }
  const handleStorage = (e) => {
    if (e.key !== THEME_STORAGE_KEY) {
      return
    }
    const t = e.newValue
    setTheme(t)
  }
  const handleSystemPrefer = (e) => {
    if (themeKey === "system") {
      setSystemPrefer(e);
    }
  }
  (() => {
    if (themeKey && themeKey !== "system") {
      return setTheme(themeKey);
    }
    setSystemPrefer(systemPrefer);
  })()
  window.addEventListener("storage", handleStorage);
  systemPrefer.addEventListener("change", handleSystemPrefer);
</script>
